
Begin optimization report for: iterate(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(176,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ext_core.c(189,9)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ext_core.c(195,13)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END

      LOOP BEGIN at ext_core.c(216,13)
         remark #15523: loop was not vectorized: cannot compute loop iteration count before executing the loop.
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: reduce_angular(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(307,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ext_core.c(310,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ext_core.c(313,13)
      remark #15389: vectorization support: reference time_delta has unaligned access   [ ext_core.c(315,50) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15458: masked indexed (or gather) loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 4 
      remark #15463: unmasked indexed (or scatter) stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 193 
      remark #15477: vector loop cost: 235.500 
      remark #15478: estimated potential speedup: 0.810 
      remark #15479: lightweight vector operations: 131 
      remark #15480: medium-overhead vector operations: 2 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ext_core.c(317,17)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ext_core.c(327,25)
            remark #25460: No loop optimizations reported
         LOOP END

         LOOP BEGIN at ext_core.c(337,25)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ext_core.c(313,13)
   <Remainder>

      LOOP BEGIN at ext_core.c(317,17)
         remark #25460: No loop optimizations reported

         LOOP BEGIN at ext_core.c(327,25)
            remark #25460: No loop optimizations reported
         LOOP END

         LOOP BEGIN at ext_core.c(337,25)
            remark #25460: No loop optimizations reported
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ext_get_transpose_scalar_flux_(double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(356,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ext_core.c(358,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ext_core.c(360,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ext_core.c(362,17)
         <Multiversioned v1>
            remark #15300: LOOP WAS VECTORIZED
            remark #15458: masked indexed (or gather) loads: 1 
            remark #15459: masked indexed (or scatter) stores: 1 
            remark #15475: --- begin vector loop cost summary ---
            remark #15476: scalar loop cost: 28 
            remark #15477: vector loop cost: 26.000 
            remark #15478: estimated potential speedup: 1.070 
            remark #15479: lightweight vector operations: 17 
            remark #15480: medium-overhead vector operations: 1 
            remark #15481: heavy-overhead vector operations: 1 
            remark #15488: --- end vector loop cost summary ---
         LOOP END

         LOOP BEGIN at ext_core.c(362,17)
         <Remainder, Multiversioned v1>
         LOOP END

         LOOP BEGIN at ext_core.c(362,17)
         <Multiversioned v2>
            remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
         LOOP END

         LOOP BEGIN at ext_core.c(362,17)
         <Remainder, Multiversioned v2>
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ext_get_transpose_scalar_moments_(double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(375,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ext_core.c(377,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ext_core.c(379,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ext_core.c(381,17)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ext_core.c(383,21)
            <Multiversioned v1>
               remark #15300: LOOP WAS VECTORIZED
               remark #15458: masked indexed (or gather) loads: 1 
               remark #15459: masked indexed (or scatter) stores: 1 
               remark #15475: --- begin vector loop cost summary ---
               remark #15476: scalar loop cost: 49 
               remark #15477: vector loop cost: 27.500 
               remark #15478: estimated potential speedup: 1.770 
               remark #15479: lightweight vector operations: 21 
               remark #15480: medium-overhead vector operations: 2 
               remark #15488: --- end vector loop cost summary ---
            LOOP END

            LOOP BEGIN at ext_core.c(383,21)
            <Remainder, Multiversioned v1>
            LOOP END

            LOOP BEGIN at ext_core.c(383,21)
            <Multiversioned v2>
               remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
            LOOP END

            LOOP BEGIN at ext_core.c(383,21)
            <Remainder, Multiversioned v2>
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: ext_get_transpose_output_flux_(double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(400,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ext_core.c(402,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ext_core.c(404,13)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ext_core.c(406,17)
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ext_core.c(408,21)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ext_core.c(410,25)
               <Multiversioned v1>
                  remark #15300: LOOP WAS VECTORIZED
                  remark #15460: masked strided loads: 1 
                  remark #15462: unmasked indexed (or gather) loads: 1 
                  remark #15475: --- begin vector loop cost summary ---
                  remark #15476: scalar loop cost: 56 
                  remark #15477: vector loop cost: 3.500 
                  remark #15478: estimated potential speedup: 15.930 
                  remark #15479: lightweight vector operations: 1 
                  remark #15480: medium-overhead vector operations: 1 
                  remark #15481: heavy-overhead vector operations: 1 
                  remark #15488: --- end vector loop cost summary ---
               LOOP END

               LOOP BEGIN at ext_core.c(410,25)
               <Remainder, Multiversioned v1>
               LOOP END

               LOOP BEGIN at ext_core.c(410,25)
               <Multiversioned v2>
                  remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
               LOOP END

               LOOP BEGIN at ext_core.c(410,25)
               <Remainder, Multiversioned v2>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: transpose_scat_coeff(double *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(429,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff line 435 and scat_coeff line 435
   remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff line 435 and scat_coeff line 435

   LOOP BEGIN at ext_core.c(431,9)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff line 435 and scat_coeff line 435
      remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff line 435 and scat_coeff line 435

      LOOP BEGIN at ext_core.c(433,13)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15399: vectorization support: unroll factor set to 2
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15459: masked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 50.000 
         remark #15478: estimated potential speedup: 0.720 
         remark #15479: lightweight vector operations: 13 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ext_core.c(433,13)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: initialise_host_memory(double *, double *, double *, double *, double *, double *, double *, int *, double *, double *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(429,5) inlined into ext_core.c(119,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff.502 line 435 and scat_coeff.502 line 435
   remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff.502 line 435 and scat_coeff.502 line 435

   LOOP BEGIN at ext_core.c(431,9) inlined into ext_core.c(119,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff.502 line 435 and scat_coeff.502 line 435
      remark #15346: vector dependence: assumed OUTPUT dependence between scat_coeff.502 line 435 and scat_coeff.502 line 435

      LOOP BEGIN at ext_core.c(433,13) inlined into ext_core.c(119,18)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #15399: vectorization support: unroll factor set to 2
         remark #15458: masked indexed (or gather) loads: 1 
         remark #15459: masked indexed (or scatter) stores: 1 
         remark #15475: --- begin vector loop cost summary ---
         remark #15476: scalar loop cost: 18 
         remark #15477: vector loop cost: 50.000 
         remark #15478: estimated potential speedup: 0.720 
         remark #15479: lightweight vector operations: 13 
         remark #15480: medium-overhead vector operations: 1 
         remark #15481: heavy-overhead vector operations: 1 
         remark #15488: --- end vector loop cost summary ---
      LOOP END

      LOOP BEGIN at ext_core.c(433,13) inlined into ext_core.c(119,18)
      <Remainder>
      LOOP END
   LOOP END
LOOP END
===========================================================================

*MIC* Begin optimization report for: iterate(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(195,13)
<Peeled>
   remark #15389: vectorization support: reference groups_todo has unaligned access   [ ext_core.c(197,17) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ext_core.c(195,13)
   remark #15388: vectorization support: reference groups_todo has aligned access   [ ext_core.c(197,17) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 5 
   remark #15477: vector loop cost: 0.250 
   remark #15478: estimated potential speedup: 15.620 
   remark #15479: lightweight vector operations: 5 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at ext_core.c(195,13)
<Remainder>
   remark #15388: vectorization support: reference groups_todo has aligned access   [ ext_core.c(197,17) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

*MIC* Begin optimization report for: reduce_angular(void)

    Report from: Vector optimizations [vec]


LOOP BEGIN at ext_core.c(307,5)
   remark #15521: loop was not vectorized: explicitly compute the iteration count before executing the loop or try using canonical loop form
LOOP END

LOOP BEGIN at ext_core.c(310,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ext_core.c(313,13)
      remark #15389: vectorization support: reference time_delta has unaligned access   [ ext_core.c(315,50) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15415: vectorization support: gather was generated for the variable angular:  indirect access    [ ext_core.c(320,40) ]
      remark #15415: vectorization support: gather was generated for the variable angular_prev:  indirect access    [ ext_core.c(321,42) ]
      remark #15416: vectorization support: scatter was generated for the variable scalar_flux: masked, indirect access    [ ext_core.c(325,25) ]
      remark #15415: vectorization support: gather was generated for the variable scalar_flux: masked, indirect access    [ ext_core.c(325,25) ]
      remark #15416: vectorization support: scatter was generated for the variable scalar_mom: masked, indirect access    [ ext_core.c(329,29) ]
      remark #15415: vectorization support: gather was generated for the variable scalar_mom: masked, indirect access    [ ext_core.c(329,29) ]
      remark #15416: vectorization support: scatter was generated for the variable scalar_flux: masked, indirect access    [ ext_core.c(335,25) ]
      remark #15415: vectorization support: gather was generated for the variable scalar_flux: masked, indirect access    [ ext_core.c(335,25) ]
      remark #15416: vectorization support: scatter was generated for the variable scalar_mom: masked, indirect access    [ ext_core.c(339,29) ]
      remark #15415: vectorization support: gather was generated for the variable scalar_mom: masked, indirect access    [ ext_core.c(339,29) ]
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15458: masked indexed (or gather) loads: 2 
      remark #15462: unmasked indexed (or gather) loads: 4 
      remark #15463: unmasked indexed (or scatter) stores: 4 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 193 
      remark #15477: vector loop cost: 34.500 
      remark #15478: estimated potential speedup: 5.210 
      remark #15479: lightweight vector operations: 163 
      remark #15488: --- end vector loop cost summary ---

      LOOP BEGIN at ext_core.c(317,17)

         LOOP BEGIN at ext_core.c(327,25)
         LOOP END

         LOOP BEGIN at ext_core.c(337,25)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ext_core.c(313,13)
   <Remainder>
      remark #15389: vectorization support: reference time_delta has unaligned access   [ ext_core.c(315,50) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15301: REMAINDER LOOP WAS VECTORIZED

      LOOP BEGIN at ext_core.c(317,17)

         LOOP BEGIN at ext_core.c(327,25)
         LOOP END

         LOOP BEGIN at ext_core.c(337,25)
         LOOP END
      LOOP END
   LOOP END
LOOP END
===========================================================================
